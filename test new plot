import matplotlib.pyplot as plt

# ordres visuels
maturity_order = [1,2,3,4,5,7,10,15,20,25,30]
box_order      = ['2s10s','5s10s','2s30s','5s30s','10s30s','10s15s']
fly_order      = ['2s5s10s','5s7s10s','10s15s30s','5s10s30s']

# ---------- utilitaire commun : un pays / un axe ----------
def _candlestick_one_country(ax, rows, x_key, ratio_keys=('Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo')):
    # rows: DataFrame déjà filtré sur un pays
    need = set(['Vol', x_key]).union(ratio_keys)
    rows = rows[[c for c in rows.columns if c in need]].copy()
    if rows.empty:
        return

    # ordonner l'axe X
    if x_key == 'Maturity':
        order = [x for x in maturity_order if x in rows[x_key].tolist()]
        rows = rows.set_index(x_key).loc[order].reset_index()
    elif x_key == 'Box':
        order = [x for x in box_order if x in rows['Box'].tolist()]
        rows = rows.set_index(x_key).loc[order].reset_index()
    elif x_key == 'Fly':
        order = [x for x in fly_order if x in rows['Fly'].tolist()]
        rows = rows.set_index(x_key).loc[order].reset_index()
    else:
        rows = rows.sort_values(x_key)

    label_added = False
    for _, r in rows.iterrows():
        vol = float(r['Vol'])
        if vol == 0 or not all(k in r for k in ratio_keys):
            continue

        x   = r[x_key]
        mn  = r['Min'] / vol
        q1  = r['Q25'] / vol
        md  = r['Q50'] / vol
        q3  = r['Q75'] / vol
        mx  = r['Max'] / vol
        cur = r['CarryOverVol']                  # déjà = carry/vol
        wk  = (r['CarryOneWeekAgo'] / vol) if not pd.isna(r['CarryOneWeekAgo']) else None

        # ---- chandelle ----
        # whiskers
        ax.plot([x, x], [mn, mx], color='black', linewidth=2, marker='|')
        # corps (back noir épais + "remplissage" blanc par-dessus)
        ax.plot([x, x], [q1, q3], color='black', linewidth=8, alpha=0.5)
        ax.plot([x, x], [q1, q3], color='white', linewidth=6, alpha=1.0)
        # médiane (trait noir)
        ax.plot(x, md, color='black', marker='_', markersize=6)

        # ---- current (trait rouge, pas de rond) ----
        ax.plot(x, cur, color='red', marker='_', markersize=10,
                label='Current Value' if not label_added else "")

        # ---- 1 week ago (trait bleu + petit point bleu) ----
        if wk is not None:
            ax.plot(x, wk, color='steelblue', marker='_', markersize=8,
                    label='1 Week ago' if not label_added else "")
            ax.plot(x, wk, color='steelblue', marker='o', markersize=3)  # petit rond au centre

        label_added = True

    ax.grid(True)
    ax.set_ylabel('CarryOverVol')
    ax.legend(loc='upper right')


# =========================
# 1) Outright
# =========================
def plot_candlestick_outright(df_outright, countries, min_maturity=3):
    for c in countries:
        sub = df_outright[(df_outright['Country'] == c) & (df_outright['Maturity'] >= min_maturity)].copy()
        if sub.empty:
            print(f"[outright] rien pour {c}")
            continue
        fig, ax = plt.subplots(figsize=(12, 5))
        _candlestick_one_country(ax, sub, x_key='Maturity')
        ax.set_title(f"Candlestick-like Chart (Outright) — {c}")
        ax.set_xlabel('Maturity Buckets')
        plt.show()


# =========================
# 2) Spreads vs Germany
#    (ATTENTION: colonne 'Country', x = 'Maturity')
# =========================
def plot_candlestick_spreads(df_spread, countries, min_maturity=3):
    for c in countries:
        sub = df_spread[(df_spread['Country'] == c) & (df_spread['Maturity'] >= min_maturity)].copy()
        if sub.empty:
            print(f"[spread] rien pour {c}")
            continue
        # Renommer pour réutiliser l’utilitaire
        sub = sub.rename(columns={
            'CarrySpread': 'Carry',          # pas utilisé ici mais homogène
        })
        fig, ax = plt.subplots(figsize=(12, 5))
        _candlestick_one_country(ax, sub, x_key='Maturity')
        ax.set_title(f"Candlestick-like Chart (Spreads vs Germany) — {c}")
        ax.set_xlabel('Maturity Buckets')
        plt.show()


# =========================
# 3) Curve Outright (x = 'Box', strings)
# =========================
def plot_candlestick_curve_out(df_curve, countries):
    for c in countries:
        sub = df_curve[df_curve['Country'] == c].copy()
        if sub.empty:
            print(f"[curve outright] rien pour {c}")
            continue
        fig, ax = plt.subplots(figsize=(12, 5))
        _candlestick_one_country(ax, sub, x_key='Box')
        ax.set_title(f"Candlestick-like Chart (Curve Outright) — {c}")
        ax.set_xlabel('Box')
        plt.show()


# =========================
# 4) Boxes vs Germany (x = 'Box', strings)
# =========================
def plot_candlestick_boxes(df_box, countries):
    for c in countries:
        sub = df_box[df_box['Country'] == c].copy()
        if sub.empty:
            print(f"[boxes] rien pour {c}")
            continue
        fig, ax = plt.subplots(figsize=(12, 5))
        _candlestick_one_country(ax, sub, x_key='Box')
        ax.set_title(f"Candlestick-like Chart (Boxes vs Germany) — {c}")
        ax.set_xlabel('Box')
        plt.show()


# =========================
# 5) Fly Outright (x = 'Fly', strings)
# =========================
def plot_candlestick_fly_out(df_fly_out, countries):
    for c in countries:
        sub = df_fly_out[df_fly_out['Country'] == c].copy()
        if sub.empty:
            print(f"[fly outright] rien pour {c}")
            continue
        fig, ax = plt.subplots(figsize=(12, 5))
        _candlestick_one_country(ax, sub, x_key='Fly')
        ax.set_title(f"Candlestick-like Chart (Fly Outright) — {c}")
        ax.set_xlabel('Fly')
        plt.show()


# =========================
# 6) Fly Boxes vs Germany (x = 'Fly', strings)
# =========================
def plot_candlestick_fly_box(df_fly_box, countries):
    for c in countries:
        sub = df_fly_box[df_fly_box['Country'] == c].copy()
        if sub.empty:
            print(f"[fly box] rien pour {c}")
            continue
        fig, ax = plt.subplots(figsize=(12, 5))
        _candlestick_one_country(ax, sub, x_key='Fly')
        ax.set_title(f"Candlestick-like Chart (Fly Boxes vs Germany) — {c}")
        ax.set_xlabel('Fly')
        plt.show()
