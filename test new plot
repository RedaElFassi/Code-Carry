import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# ---------- noyau : dessin d’un « candlestick » pour une sous-table ----------
def _draw_candles(ax, rows, x_key, x_is_bucket=True, title="Candlestick", xlabel="Maturity Buckets"):
    """
    rows: DataFrame filtré pour un pays (ou pair) avec colonnes:
          Min, Max, Q25, Q50, Q75, Vol, CarryOverVol, CarryOneWeekAgo, et x_key (Bucket ou Box/Fly).
    x_key: 'Bucket' ou 'Box'/'Fly'
    x_is_bucket: True si x est numérique (buckets); False si catégoriel (Box/Fly)
    """
    # -- Convertit proprement les colonnes en numérique (évite str/float errors)
    cols_num = ["Min","Max","Q25","Q50","Q75","Vol","CarryOverVol","CarryOneWeekAgo"]
    for c in cols_num:
        if c in rows.columns:
            rows[c] = pd.to_numeric(rows[c], errors="coerce")

    label_added = False

    # Si x est catégoriel (boxes/flies) -> on mappe en positions x = 1..N dans l'ordre d'apparition
    if not x_is_bucket:
        cats = rows[x_key].astype(str).tolist()
        order = list(dict.fromkeys(cats))  # conserve l’ordre d’apparition
        xpos = {lab: i+1 for i, lab in enumerate(order)}
        ax.set_xticks(list(xpos.values()))
        ax.set_xticklabels(order, rotation=0)
    else:
        xpos = None

    for _, row in rows.iterrows():
        vol = row.get('Vol', np.nan)
        if pd.isna(vol) or vol <= 0:
            continue

        # X
        x = row[x_key] if x_is_bucket else xpos[str(row[x_key])]

        # Y (ratios)
        min_val      = row['Min']  / vol if pd.notna(row['Min'])  else np.nan
        max_val      = row['Max']  / vol if pd.notna(row['Max'])  else np.nan
        q1_val       = row['Q25']  / vol if pd.notna(row['Q25'])  else np.nan
        q3_val       = row['Q75']  / vol if pd.notna(row['Q75'])  else np.nan
        median_val   = row['Q50']  / vol if pd.notna(row['Q50'])  else np.nan
        current_val  = row['CarryOverVol']                     # déjà (carry/vol)
        one_week_val = row['CarryOneWeekAgo'] / vol if pd.notna(row['CarryOneWeekAgo']) else np.nan

        # Skip si valeurs clés manquantes
        if any(pd.isna(v) for v in [min_val, max_val, q1_val, q3_val, median_val, current_val]):
            continue

        # Tiges min↔max
        ax.plot([x, x], [min_val, max_val], color='black', marker='_', linewidth=2)

        # Bloc épais q25↔q75 (noir dessous, blanc dessus)
        ax.plot([x, x], [q1_val, q3_val], color='black', linewidth=8, alpha=0.5)
        ax.plot([x, x], [q1_val, q3_val], color='white', linewidth=6, alpha=1.0)

        # Trait médian (noir)
        ax.plot([x, x], [median_val, median_val], color='black', marker='_', markersize=6)

        # Current = trait rouge UNIQUEMENT (ta ligne exacte)
        ax.plot(x, current_val, color='red', marker='_', markersize=10,
                label='Current Value' if not label_added else "")

        # 1 week ago = trait bleu UNIQUEMENT (ta ligne exacte)
        if pd.notna(one_week_val):
            ax.plot(x, one_week_val, color='steelblue', marker='_', markersize=8,
                    label='1 Week ago' if not label_added else "")

        label_added = True

    ax.set_title(title)
    ax.set_ylabel("CarryOverVol")
    ax.set_xlabel(xlabel)
    ax.legend(loc='upper right')
    ax.grid(True)
    plt.tight_layout()


# ---------- 1) SPREADS vs Germany (CountryPair) ----------
def plot_candlestick_spreads(df_spread, countries=("France","Italy","Spain"), benchmark="Germany", min_bucket=2):
    """
    df_spread doit contenir: ['CountryPair','Bucket' ou 'Maturity','Min','Max','Q25','Q50','Q75','Vol','CarryOverVol','CarryOneWeekAgo'].
    On filtre par CountryPair = f"{country}-{benchmark}".
    """
    # Harmonise 'Maturity' -> 'Bucket' si besoin
    if 'Bucket' not in df_spread.columns and 'Maturity' in df_spread.columns:
        df_spread = df_spread.rename(columns={'Maturity':'Bucket'})

    for c in countries:
        pair = f"{c}-{benchmark}"
        sub = df_spread[(df_spread['CountryPair'] == pair)].copy()
        if 'Bucket' in sub.columns:
            sub = sub[pd.to_numeric(sub['Bucket'], errors='coerce').ge(min_bucket)]
        if sub.empty:
            print(f"[info] aucun point pour {pair}.")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Bucket', x_is_bucket=True,
                      title=f"Candlestick-like Chart for {c}",
                      xlabel="Maturity Buckets")


# ---------- 2) OUTRIGHT (Country) ----------
def plot_candlestick_outright(df_outright, countries=("France","Italy","Spain"), min_bucket=2):
    """
    df_outright: colonnes ['Country','Maturity' (ou 'Bucket'), 'Min','Max','Q25','Q50','Q75','Vol','CarryOverVol','CarryOneWeekAgo'].
    """
    df = df_outright.copy()
    if 'Bucket' not in df.columns and 'Maturity' in df.columns:
        df = df.rename(columns={'Maturity':'Bucket'})

    # bucket numérique pour filtrage
    df['Bucket'] = pd.to_numeric(df['Bucket'], errors='coerce')

    for c in countries:
        sub = df[(df['Country'] == c) & (df['Bucket'] >= min_bucket)].copy()
        if sub.empty:
            print(f"[info] aucun point pour {c}.")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Bucket', x_is_bucket=True,
                      title=f"Candlestick-like Chart for {c}",
                      xlabel="Maturity Buckets")


# ---------- 3) CURVE OUTRIGHT (Country, x = Box catégoriel) ----------
def plot_candlestick_curve_outright(df_curve, countries=("France","Italy","Spain")):
    """
    df_curve: ['Country','Box','Min','Max','Q25','Q50','Q75','Vol','CarryOverVol','CarryOneWeekAgo'].
    """
    for c in countries:
        sub = df_curve[df_curve['Country'] == c].copy()
        if sub.empty:
            print(f"[info] aucun point pour {c}.")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Box', x_is_bucket=False,
                      title=f"Candlestick-like Chart for {c}",
                      xlabel="Boxes")


# ---------- 4) BOX SPREADS vs Germany (Country, x = Box catégoriel) ----------
def plot_candlestick_box_spreads(df_box, countries=("France","Italy","Spain")):
    """
    df_box: ['Country','Box','Min','Max','Q25','Q50','Q75','Vol','CarryOverVol','CarryOneWeekAgo'].
    """
    for c in countries:
        sub = df_box[df_box['Country'] == c].copy()
        if sub.empty:
            print(f"[info] aucun point pour {c}.")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Box', x_is_bucket=False,
                      title=f"Candlestick-like Chart for {c}",
                      xlabel="Boxes")


# ---------- 5) FLY OUTRIGHT (Country, x = Fly catégoriel) ----------
def plot_candlestick_fly_outright(df_fly_out, countries=("France","Italy","Spain")):
    """
    df_fly_out: ['Country','Fly','Min','Max','Q25','Q50','Q75','Vol','CarryOverVol','CarryOneWeekAgo'].
    """
    for c in countries:
        sub = df_fly_out[df_fly_out['Country'] == c].copy()
        if sub.empty:
            print(f"[info] aucun point pour {c}.")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Fly', x_is_bucket=False,
                      title=f"Candlestick-like Chart for {c}",
                      xlabel="Flies")


# ---------- 6) FLY BOX SPREADS vs Germany (Country, x = Fly catégoriel) ----------
def plot_candlestick_fly_box_spreads(df_fly_box, countries=("France","Italy","Spain")):
    """
    df_fly_box: ['Country','Fly','Min','Max','Q25','Q50','Q75','Vol','CarryOverVol','CarryOneWeekAgo'].
    """
    for c in countries:
        sub = df_fly_box[df_fly_box['Country'] == c].copy()
        if sub.empty:
            print(f"[info] aucun point pour {c}.")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Fly', x_is_bucket=False,
                      title=f"Candlestick-like Chart for {c}",
                      xlabel="Flies")
