# =========================================
# EMAIL "Carry Summaries" — 2 columns layout
# Works with your variable names & plotting fns
# =========================================
import smtplib, uuid
from io import BytesIO
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
import matplotlib.pyplot as plt
import pandas as pd

# ---------------------------
# 1) Non-breaking figure wrappers
#    (reuse your plotting code but return a Figure instead of showing)
# ---------------------------
def _capture_current_figure():
    fig = plt.gcf()
    # Don’t show in notebook; caller decides
    plt.close(fig)
    return fig

# ---- Scatter (reuse your generic) ----
def scatter_figure_outright(df_outright):
    _plot_scatter_generic(df_outright, key_col='Maturity', dataset_name='outright',
                          title="Outright — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_spread(df_spread):
    _plot_scatter_generic(df_spread, key_col='Maturity', dataset_name='spread',
                          title="Spreads vs Germany — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_box_outright(df_curve):
    _plot_scatter_generic(df_curve, key_col='Box', dataset_name='curve_outright',
                          title="Curve Outright — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_box_vs(df_box):
    _plot_scatter_generic(df_box, key_col='Box', dataset_name='box',
                          title="Box vs Germany — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_fly_outright(df_fly_out):
    _plot_scatter_generic(df_fly_out, key_col='Fly', dataset_name='fly_outright',
                          title="Fly Outright — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_fly_vs(df_fly_box):
    _plot_scatter_generic(df_fly_box, key_col='Fly', dataset_name='fly_box',
                          title="Fly vs Germany — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

# ---- Candlesticks (return a list of figs per country) ----
def candlestick_figs_outright(df_outright, countries=("France","Italy","Spain")):
    figs = []
    for c in countries:
        df = df_outright.rename(columns={'Maturity':'Bucket'}) if 'Maturity' in df_outright.columns else df_outright
        sub = df[(df['Country']==c)].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Bucket', x_is_bucket=True,
                      title=f"Candlestick-like Chart for {c}", xlabel="Maturity Buckets")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_spread(df_spread, countries=("France","Italy","Spain"), benchmark="Germany"):
    figs = []
    df = df_spread.rename(columns={'Maturity':'Bucket'}) if 'Maturity' in df_spread.columns else df_spread
    for c in countries:
        pair = f"{c}-{benchmark}"
        sub = df[df['CountryPair']==pair].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Bucket', x_is_bucket=True,
                      title=f"Candlestick-like Chart for {c}", xlabel="Maturity Buckets")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_box_outright(df_curve, countries=("France","Italy","Spain")):
    figs=[]
    for c in countries:
        sub = df_curve[df_curve['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Box', x_is_bucket=False,
                      title=f"Candlestick-like Chart for {c}", xlabel="Boxes")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_box_vs(df_box, countries=("France","Italy","Spain")):
    figs=[]
    for c in countries:
        sub = df_box[df_box['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Box', x_is_bucket=False,
                      title=f"Candlestick-like Chart for {c}", xlabel="Boxes")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_fly_outright(df_fly_out, countries=("France","Italy","Spain")):
    figs=[]
    for c in countries:
        sub = df_fly_out[df_fly_out['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Fly', x_is_bucket=False,
                      title=f"Candlestick-like Chart for {c}", xlabel="Flies")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_fly_vs(df_fly_box, countries=("France","Italy","Spain")):
    figs=[]
    for c in countries:
        sub = df_fly_box[df_fly_box['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _draw_candles(ax, sub, x_key='Fly', x_is_bucket=False,
                      title=f"Candlestick-like Chart for {c}", xlabel="Flies")
        figs.append(_capture_current_figure())
    return figs

# ---------------------------
# 2) HTML helpers
# ---------------------------
def _df_to_html_table(df: pd.DataFrame, caption=None, max_rows=40, max_cols=20):
    if df is None or len(df)==0:
        return "<div style='font-style:italic;color:#666'>No data</div>"
    d = df.copy()
    if d.shape[0] > max_rows:
        d = d.head(max_rows).append(pd.DataFrame([["..."]*d.shape[1]], columns=d.columns))
    if d.shape[1] > max_cols:
        d = d[d.columns[:max_cols]]
    html = d.to_html(border=1, index=True, justify='center')
    if caption: html = f"<div style='font:600 12px Arial;margin:4px 0 2px 0'>{caption}</div>{html}"
    html = html.replace("<table", "<table style='border-collapse:collapse;font:11px Arial;width:100%'")
    html = html.replace("<th>", "<th style='padding:4px 6px;background:#f2f2f2;border:1px solid #ddd'>")
    html = html.replace("<td>", "<td style='padding:3px 6px;border:1px solid #eee'>")
    return html

def _fig_to_cid(msg, fig, cid_hint):
    if fig is None: return ""
    buf = BytesIO(); fig.savefig(buf, format='png', dpi=160, bbox_inches="tight"); buf.seek(0)
    part = MIMEImage(buf.read(), 'png')
    cid = f"{cid_hint}-{uuid.uuid4().hex}@carry"
    part.add_header('Content-ID', f"<{cid}>")
    part.add_header('Content-Disposition', 'inline', filename=f"{cid_hint}.png")
    msg.attach(part)
    return cid

def _section_html(title_left, table_left_html, scatter_left_cid, cand_left_cids,
                  title_right, table_right_html, scatter_right_cid, cand_right_cids):
    def col(title, table_html, sc_cid, cand_cids):
        imgs = []
        if sc_cid: imgs.append(f"<img src='cid:{sc_cid}' style='width:100%;max-width:700px;display:block;margin:4px 0'>")
        for c in (cand_cids or []):
            if c: imgs.append(f"<img src='cid:{c}' style='width:100%;max-width:700px;display:block;margin:4px 0'>")
        return f"""
        <div style="padding:10px">
          <div style="font:700 14px Arial;margin:0 0 6px 0">{title}</div>
          {table_html}
          {''.join(imgs)}
        </div>"""
    return f"""
    <tr>
      <td valign="top" style="width:50%;border-right:1px solid #e6e6e6">
        {col(title_left, table_left_html, scatter_left_cid, cand_left_cids)}
      </td>
      <td valign="top" style="width:50%">
        {col(title_right, table_right_html, scatter_right_cid, cand_right_cids)}
      </td>
    </tr>"""

# ---------------------------
# 3) Build all figs from YOUR dfs, then send
#     (variable names aligned with your pipeline)
# ---------------------------
def build_all_carry_figs_and_tables(
    best_outright, best_spread, best_curve, best_box, best_fly_out, best_fly_box,
    pivot_df_out, pivot_df_spread, pivot_df_curve, pivot_df_box, pivot_df_fly_out, pivot_df_fly_box,
    countries=("France","Italy","Spain")
):
    # scatters
    fig_sc_out   = scatter_figure_outright(best_outright)
    fig_sc_sp    = scatter_figure_spread(best_spread)
    fig_sc_box_o = scatter_figure_box_outright(best_curve)
    fig_sc_box_v = scatter_figure_box_vs(best_box)
    fig_sc_fly_o = scatter_figure_fly_outright(best_fly_out)
    fig_sc_fly_v = scatter_figure_fly_vs(best_fly_box)

    # candlesticks
    figs_out     = candlestick_figs_outright(best_outright, countries=countries)
    figs_spread  = candlestick_figs_spread(best_spread, countries=countries)
    figs_box_out = candlestick_figs_box_outright(best_curve, countries=countries)
    figs_box_vs  = candlestick_figs_box_vs(best_box, countries=countries)
    figs_fly_out = candlestick_figs_fly_outright(best_fly_out, countries=countries)
    figs_fly_vs  = candlestick_figs_fly_vs(best_fly_box, countries=countries)

    # tables (already computed pivots with your exact names)
    tables = dict(
        t_out     = _df_to_html_table(pivot_df_out,     caption="Pivot — Outright"),
        t_spread  = _df_to_html_table(pivot_df_spread,  caption="Pivot — Spread vs Germany"),
        t_box_out = _df_to_html_table(pivot_df_curve,   caption="Pivot — Curve Outright (Box)"),
        t_box_vs  = _df_to_html_table(pivot_df_box,     caption="Pivot — Box vs Germany"),
        t_fly_out = _df_to_html_table(pivot_df_fly_out, caption="Pivot — Fly Outright"),
        t_fly_vs  = _df_to_html_table(pivot_df_fly_box, caption="Pivot — Fly vs Germany"),
    )

    figs = dict(
        sc_out=fig_sc_out, sc_sp=fig_sc_sp,
        sc_box_o=fig_sc_box_o, sc_box_v=fig_sc_box_v,
        sc_fly_o=fig_sc_fly_o, sc_fly_v=fig_sc_fly_v,
        cand_out=figs_out, cand_sp=figs_spread,
        cand_box_o=figs_box_out, cand_box_v=figs_box_vs,
        cand_fly_o=figs_fly_out, cand_fly_v=figs_fly_vs,
    )
    return tables, figs

def send_carry_email_using_your_vars(
    to_list,
    best_outright, best_spread, best_curve, best_box, best_fly_out, best_fly_box,
    pivot_df_out, pivot_df_spread, pivot_df_curve, pivot_df_box, pivot_df_fly_out, pivot_df_fly_box,
    sender="your.email@jpmorgan.com", subject="Carry Summaries",
    countries=("France","Italy","Spain")
):
    tables, figs = build_all_carry_figs_and_tables(
        best_outright, best_spread, best_curve, best_box, best_fly_out, best_fly_box,
        pivot_df_out, pivot_df_spread, pivot_df_curve, pivot_df_box, pivot_df_fly_out, pivot_df_fly_box,
        countries=countries
    )

    msg = MIMEMultipart('related')
    msg['Subject'] = subject
    msg['From']    = sender
    msg['To']      = ", ".join(to_list)

    intro = """
    <div style="font:13px Arial">
      Hello Team,<br><br>
      Please find below the Carry Analysis.<br><br>
    </div>
    """

    # attach images and get CIDs
    def add(fig, hint): return _fig_to_cid(msg, fig, hint)
    cid_sc_out   = add(figs['sc_out'],   "sc_out")
    cid_sc_sp    = add(figs['sc_sp'],    "sc_sp")
    cid_sc_box_o = add(figs['sc_box_o'], "sc_box_o")
    cid_sc_box_v = add(figs['sc_box_v'], "sc_box_v")
    cid_sc_fly_o = add(figs['sc_fly_o'], "sc_fly_o")
    cid_sc_fly_v = add(figs['sc_fly_v'], "sc_fly_v")

    cids_cand_out   = [add(f, f"cand_out_{i+1}")   for i,f in enumerate(figs['cand_out']   or [])]
    cids_cand_sp    = [add(f, f"cand_sp_{i+1}")    for i,f in enumerate(figs['cand_sp']    or [])]
    cids_cand_box_o = [add(f, f"cand_box_o_{i+1}") for i,f in enumerate(figs['cand_box_o'] or [])]
    cids_cand_box_v = [add(f, f"cand_box_v_{i+1}") for i,f in enumerate(figs['cand_box_v'] or [])]
    cids_cand_fly_o = [add(f, f"cand_fly_o_{i+1}") for i,f in enumerate(figs['cand_fly_o'] or [])]
    cids_cand_fly_v = [add(f, f"cand_fly_v_{i+1}") for i,f in enumerate(figs['cand_fly_v'] or [])]

    # 2 columns × 3 rows
    body = f"""
    <html><body style="margin:0;padding:0;background:#fff">
      {intro}
      <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%"
             style="border-collapse:collapse;font:13px Arial">
        <tr>
          <td colspan="2" style="font:700 16px Arial;padding:6px 10px;background:#f7f7f7;border-bottom:1px solid #e6e6e6">
            Outright (left) — vs Germany (right)
          </td>
        </tr>

        { _section_html(
            "Outright",              tables['t_out'],     cid_sc_out,   cids_cand_out,
            "Spread vs Germany",     tables['t_spread'],  cid_sc_sp,    cids_cand_sp
          ) }

        { _section_html(
            "Curve Outright (Box)",  tables['t_box_out'], cid_sc_box_o, cids_cand_box_o,
            "Box vs Germany",        tables['t_box_vs'],  cid_sc_box_v, cids_cand_box_v
          ) }

        { _section_html(
            "Fly Outright",          tables['t_fly_out'], cid_sc_fly_o, cids_cand_fly_o,
            "Fly vs Germany",        tables['t_fly_vs'],  cid_sc_fly_v, cids_cand_fly_v
          ) }
      </table>
      <div style="height:12px"></div>
      <div style="font:11px Arial;color:#666;padding:0 10px">Generated automatically.</div>
    </body></html>
    """
    msg.attach(MIMEText(body, 'html'))

    # send
    smtp = smtplib.SMTP('mailhost.jpmchase.net')
    smtp.starttls()
    smtp.sendmail(sender, to_list, msg.as_string())
    smtp.quit()

# =============================
# EXAMPLE CALL (adapt emails & use your real dfs)
# =============================
# Assumes you already computed:
# best_outright, best_spread, best_curve, best_box, best_fly_out, best_fly_box
# pivot_df_out, pivot_df_spread, pivot_df_curve, pivot_df_box, pivot_df_fly_out, pivot_df_fly_box
#
# send_carry_email_using_your_vars(
#     to_list=["team@jpmorgan.com"],
#     best_outright=best_outright,
#     best_spread=best_spread,
#     best_curve=best_curve,
#     best_box=best_box,
#     best_fly_out=best_fly_out,
#     best_fly_box=best_fly_box,
#     pivot_df_out=pivot_df_out,
#     pivot_df_spread=pivot_df_spread,
#     pivot_df_curve=pivot_df_curve,
#     pivot_df_box=pivot_df_box,
#     pivot_df_fly_out=pivot_df_fly_out,
#     pivot_df_fly_box=pivot_df_fly_box,
#     sender="your.email@jpmorgan.com"
# )
