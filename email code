# =========================================
# EMAIL "Carry Summaries" — 2-column HTML with inline images (no attachments)
# Compatible with your variable names & your plotting functions
# =========================================
import smtplib, uuid
from io import BytesIO
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
import matplotlib.pyplot as plt
import pandas as pd

# ---------- small helper: capture current figure without showing ----------
def _capture_current_figure():
    fig = plt.gcf()
    plt.close(fig)
    return fig

# ---------- wrappers around your plotting funcs (they must exist already) ----------
def scatter_figure_outright(df_outright):
    _plot_scatter_generic(df_outright, key_col='Maturity', dataset_name='outright',
                          title="Outright — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_spread(df_spread):
    _plot_scatter_generic(df_spread, key_col='Maturity', dataset_name='spread',
                          title="Spreads vs Germany — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_box_outright(df_curve):
    _plot_scatter_generic(df_curve, key_col='Box', dataset_name='curve_outright',
                          title="Curve Outright — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_box_vs(df_box):
    _plot_scatter_generic(df_box, key_col='Box', dataset_name='box',
                          title="Box vs Germany — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_fly_outright(df_fly_out):
    _plot_scatter_generic(df_fly_out, key_col='Fly', dataset_name='fly_outright',
                          title="Fly Outright — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def scatter_figure_fly_vs(df_fly_box):
    _plot_scatter_generic(df_fly_box, key_col='Fly', dataset_name='fly_box',
                          title="Fly vs Germany — Carry (y) vs Delivered Vol (x)")
    return _capture_current_figure()

def candlestick_figs_outright(df_outright, countries=("France","Italy","Spain")):
    figs=[]
    df = df_outright.rename(columns={'Maturity':'Bucket'}) if 'Maturity' in df_outright.columns else df_outright
    for c in countries:
        sub = df[df['Country']==c]
        if sub.empty: continue
        fig, ax = plt.subplots(figsize=(12,6))
        _draw_candles(ax, sub, x_key='Bucket', x_is_bucket=True,
                      title=f"{c} — Outright", xlabel="Maturity Buckets")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_spread(df_spread, countries=("France","Italy","Spain"), benchmark="Germany"):
    figs=[]
    df = df_spread.rename(columns={'Maturity':'Bucket'}) if 'Maturity' in df_spread.columns else df_spread
    for c in countries:
        pair = f"{c}-{benchmark}"
        sub = df[df['CountryPair']==pair]
        if sub.empty: continue
        fig, ax = plt.subplots(figsize=(12,6))
        _draw_candles(ax, sub, x_key='Bucket', x_is_bucket=True,
                      title=f"{c} — Spread vs Germany", xlabel="Maturity Buckets")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_box_outright(df_curve, countries=("France","Italy","Spain")):
    figs=[]
    for c in countries:
        sub = df_curve[df_curve['Country']==c]
        if sub.empty: continue
        fig, ax = plt.subplots(figsize=(12,6))
        _draw_candles(ax, sub, x_key='Box', x_is_bucket=False,
                      title=f"{c} — Curve Outright", xlabel="Boxes")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_box_vs(df_box, countries=("France","Italy","Spain")):
    figs=[]
    for c in countries:
        sub = df_box[df_box['Country']==c]
        if sub.empty: continue
        fig, ax = plt.subplots(figsize=(12,6))
        _draw_candles(ax, sub, x_key='Box', x_is_bucket=False,
                      title=f"{c} — Box vs Germany", xlabel="Boxes")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_fly_outright(df_fly_out, countries=("France","Italy","Spain")):
    figs=[]
    for c in countries:
        sub = df_fly_out[df_fly_out['Country']==c]
        if sub.empty: continue
        fig, ax = plt.subplots(figsize=(12,6))
        _draw_candles(ax, sub, x_key='Fly', x_is_bucket=False,
                      title=f"{c} — Fly Outright", xlabel="Flies")
        figs.append(_capture_current_figure())
    return figs

def candlestick_figs_fly_vs(df_fly_box, countries=("France","Italy","Spain")):
    figs=[]
    for c in countries:
        sub = df_fly_box[df_fly_box['Country']==c]
        if sub.empty: continue
        fig, ax = plt.subplots(figsize=(12,6))
        _draw_candles(ax, sub, x_key='Fly', x_is_bucket=False,
                      title=f"{c} — Fly vs Germany", xlabel="Flies")
        figs.append(_capture_current_figure())
    return figs

# ---------- HTML helpers ----------
def _df_to_html_table(df: pd.DataFrame, caption=None, max_rows=40, max_cols=20):
    if df is None or len(df)==0:
        return "<div style='font-style:italic;color:#666'>No data</div>"
    d = df.copy()
    if d.shape[0] > max_rows:
        d = pd.concat([d.head(max_rows),
                       pd.DataFrame([["..."]*d.shape[1]], columns=d.columns)], axis=0)
    if d.shape[1] > max_cols:
        d = d.iloc[:, :max_cols]
    html = d.to_html(border=1, index=True, justify='center')
    if caption: html = f"<div style='font:600 12px Arial;margin:6px 0 4px'>{caption}</div>{html}"
    html = html.replace("<table", "<table style='border-collapse:collapse;font:11px Arial;width:100%'")
    html = html.replace("<th>", "<th style='padding:4px 6px;background:#f2f2f2;border:1px solid #ddd'>")
    html = html.replace("<td>", "<td style='padding:3px 6px;border:1px solid #eee'>")
    return html

def _fig_to_cid(root_msg, fig, cid_hint):
    """Attach image to the *root multipart/related* with only a Content-ID (no filename, no attachment)."""
    if fig is None: return ""
    buf = BytesIO()
    fig.savefig(buf, format='png', dpi=160, bbox_inches="tight")
    buf.seek(0)
    img = MIMEImage(buf.read(), _subtype='png')
    cid = f"{cid_hint}-{uuid.uuid4().hex}@carry"
    img.add_header('Content-ID', f"<{cid}>")
    # IMPORTANT: do NOT set Content-Disposition filename=… (keeps it from appearing as an attachment)
    root_msg.attach(img)
    return cid

def _col_html(title, table_html, scatter_cid, cand_cids):
    imgs_html = []
    if scatter_cid:
        imgs_html.append(f"<img src='cid:{scatter_cid}' style='width:100%;max-width:720px;display:block;margin:8px 0'>")
    if cand_cids:
        for c in cand_cids:
            if c:
                imgs_html.append(f"<img src='cid:{c}' style='width:100%;max-width:720px;display:block;margin:8px 0'>")
    return f"""
    <div style="padding:10px">
      <div style="font:700 14px Arial;margin:0 0 6px 0">{title}</div>
      {table_html}
      {''.join(imgs_html)}
    </div>"""

def _two_col_row(left_html, right_html):
    return f"""
    <tr>
      <td valign="top" style="width:50%;border-right:1px solid #e6e6e6">{left_html}</td>
      <td valign="top" style="width:50%">{right_html}</td>
    </tr>"""

# ---------- build all figs + tables ----------
def build_all_carry_figs_and_tables(
    best_outright, best_spread, best_curve, best_box, best_fly_out, best_fly_box,
    pivot_df_out, pivot_df_spread, pivot_df_curve, pivot_df_box, pivot_df_fly_out, pivot_df_fly_box,
    countries=("France","Italy","Spain")
):
    # scatters
    fig_sc_out   = scatter_figure_outright(best_outright)
    fig_sc_sp    = scatter_figure_spread(best_spread)
    fig_sc_box_o = scatter_figure_box_outright(best_curve)
    fig_sc_box_v = scatter_figure_box_vs(best_box)
    fig_sc_fly_o = scatter_figure_fly_outright(best_fly_out)
    fig_sc_fly_v = scatter_figure_fly_vs(best_fly_box)

    # candlesticks
    figs_out     = candlestick_figs_outright(best_outright, countries=countries)
    figs_spread  = candlestick_figs_spread(best_spread, countries=countries)
    figs_box_out = candlestick_figs_box_outright(best_curve, countries=countries)
    figs_box_vs  = candlestick_figs_box_vs(best_box, countries=countries)
    figs_fly_out = candlestick_figs_fly_outright(best_fly_out, countries=countries)
    figs_fly_vs  = candlestick_figs_fly_vs(best_fly_box, countries=countries)

    tables = dict(
        t_out     = _df_to_html_table(pivot_df_out,     caption="Pivot — Outright"),
        t_spread  = _df_to_html_table(pivot_df_spread,  caption="Pivot — Spread vs Germany"),
        t_box_out = _df_to_html_table(pivot_df_curve,   caption="Pivot — Curve Outright (Box)"),
        t_box_vs  = _df_to_html_table(pivot_df_box,     caption="Pivot — Box vs Germany"),
        t_fly_out = _df_to_html_table(pivot_df_fly_out, caption="Pivot — Fly Outright"),
        t_fly_vs  = _df_to_html_table(pivot_df_fly_box, caption="Pivot — Fly vs Germany"),
    )

    figs = dict(
        sc_out=fig_sc_out, sc_sp=fig_sc_sp,
        sc_box_o=fig_sc_box_o, sc_box_v=fig_sc_box_v,
        sc_fly_o=fig_sc_fly_o, sc_fly_v=fig_sc_fly_v,
        cand_out=figs_out, cand_sp=figs_spread,
        cand_box_o=figs_box_out, cand_box_v=figs_box_vs,
        cand_fly_o=figs_fly_out, cand_fly_v=figs_fly_vs,
    )
    return tables, figs

# ---------- MAIN SENDER ----------
def send_carry_email_using_your_vars(
    to_list,
    best_outright, best_spread, best_curve, best_box, best_fly_out, best_fly_box,
    pivot_df_out, pivot_df_spread, pivot_df_curve, pivot_df_box, pivot_df_fly_out, pivot_df_fly_box,
    sender="your.email@jpmorgan.com",
    subject="Carry Summaries",
    countries=("France","Italy","Spain")
):
    tables, figs = build_all_carry_figs_and_tables(
        best_outright, best_spread, best_curve, best_box, best_fly_out, best_fly_box,
        pivot_df_out, pivot_df_spread, pivot_df_curve, pivot_df_box, pivot_df_fly_out, pivot_df_fly_box,
        countries=countries
    )

    # Root: multipart/related (for inline images); inside: multipart/alternative with just HTML
    root = MIMEMultipart('related')
    root['Subject'] = subject
    root['From']    = sender
    root['To']      = ", ".join(to_list)

    alt  = MIMEMultipart('alternative')
    root.attach(alt)

    # Attach all figures to *root* and collect their CIDs
    def add(fig, hint): return _fig_to_cid(root, fig, hint)

    cid_sc_out   = add(figs['sc_out'],   "sc_out")
    cid_sc_sp    = add(figs['sc_sp'],    "sc_sp")
    cid_sc_box_o = add(figs['sc_box_o'], "sc_box_o")
    cid_sc_box_v = add(figs['sc_box_v'], "sc_box_v")
    cid_sc_fly_o = add(figs['sc_fly_o'], "sc_fly_o")
    cid_sc_fly_v = add(figs['sc_fly_v'], "sc_fly_v")

    cids_cand_out   = [add(f, f"cand_out_{i+1}")   for i,f in enumerate(figs['cand_out']   or [])]
    cids_cand_sp    = [add(f, f"cand_sp_{i+1}")    for i,f in enumerate(figs['cand_sp']    or [])]
    cids_cand_box_o = [add(f, f"cand_box_o_{i+1}") for i,f in enumerate(figs['cand_box_o'] or [])]
    cids_cand_box_v = [add(f, f"cand_box_v_{i+1}") for i,f in enumerate(figs['cand_box_v'] or [])]
    cids_cand_fly_o = [add(f, f"cand_fly_o_{i+1}") for i,f in enumerate(figs['cand_fly_o'] or [])]
    cids_cand_fly_v = [add(f, f"cand_fly_v_{i+1}") for i,f in enumerate(figs['cand_fly_v'] or [])]

    # Build the 2-column sections (left = outright, right = vs Germany)
    intro = """
    <div style="font:13px Arial">
      Hello Team,<br><br>
      Please find below the Carry Analysis.<br><br>
    </div>
    """

    # Section 1: Outright vs Germany
    left1  = _col_html("Outright",             tables['t_out'],    cid_sc_out,   cids_cand_out)
    right1 = _col_html("Spread vs Germany",    tables['t_spread'], cid_sc_sp,    cids_cand_sp)
    row1   = _two_col_row(left1, right1)

    # Section 2: Curve Outright vs Box vs Germany
    left2  = _col_html("Curve Outright (Box)", tables['t_box_out'], cid_sc_box_o, cids_cand_box_o)
    right2 = _col_html("Box vs Germany",       tables['t_box_vs'],  cid_sc_box_v, cids_cand_box_v)
    row2   = _two_col_row(left2, right2)

    # Section 3: Fly Outright vs Fly vs Germany
    left3  = _col_html("Fly Outright",         tables['t_fly_out'], cid_sc_fly_o, cids_cand_fly_o)
    right3 = _col_html("Fly vs Germany",       tables['t_fly_vs'],  cid_sc_fly_v, cids_cand_fly_v)
    row3   = _two_col_row(left3, right3)

    html_body = f"""
    <html>
      <body style="margin:0;padding:0;background:#fff">
        {intro}
        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%"
               style="border-collapse:collapse;font:13px Arial">
          <tr>
            <td colspan="2" style="font:700 16px Arial;padding:6px 10px;background:#f7f7f7;border-bottom:1px solid #e6e6e6">
              Outright (left) — vs Germany (right)
            </td>
          </tr>
          {row1}
          <tr><td colspan="2" style="height:14px"></td></tr>
          <tr>
            <td colspan="2" style="font:700 16px Arial;padding:6px 10px;background:#f7f7f7;border-bottom:1px solid #e6e6e6">
              Outright Curve (left) — Box vs Germany (right)
            </td>
          </tr>
          {row2}
          <tr><td colspan="2" style="height:14px"></td></tr>
          <tr>
            <td colspan="2" style="font:700 16px Arial;padding:6px 10px;background:#f7f7f7;border-bottom:1px solid #e6e6e6">
              Fly Outright (left) — Fly vs Germany (right)
            </td>
          </tr>
          {row3}
        </table>
        <div style="height:12px"></div>
        <div style="font:11px Arial;color:#666;padding:0 10px">Generated automatically.</div>
      </body>
    </html>
    """

    alt.attach(MIMEText("Carry Summaries (HTML view required).", 'plain'))
    alt.attach(MIMEText(html_body, 'html'))

    # --- SEND (no login; no filenames; images inline only) ---
    smtp = smtplib.SMTP('mailhost.jpmchase.net')
    smtp.sendmail(sender, to_list, root.as_string())
    smtp.quit()

# =============================
# HOW TO CALL
# =============================
# send_carry_email_using_your_vars(
#     to_list=["team@jpmorgan.com"],
#     best_outright=best_outright,
#     best_spread=best_spread,
#     best_curve=best_curve,
#     best_box=best_box,
#     best_fly_out=best_fly_out,
#     best_fly_box=best_fly_box,
#     pivot_df_out=pivot_df_out,
#     pivot_df_spread=pivot_df_spread,
#     pivot_df_curve=pivot_df_curve,
#     pivot_df_box=pivot_df_box,
#     pivot_df_fly_out=pivot_df_fly_out,
#     pivot_df_fly_box=pivot_df_fly_box,
#     sender="your.email@jpmorgan.com"
# )

