# =============================
# Email "Carry Summaries" (2 colonnes)
# =============================
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from io import BytesIO
import pandas as pd
import matplotlib.pyplot as plt
import uuid

# -------- helpers --------
def _fig_to_cid(msg: MIMEMultipart, fig, cid_hint: str) -> str:
    """
    Convertit une figure matplotlib en image inline (PNG) et retourne son Content-ID.
    """
    if fig is None:
        return ""
    buf = BytesIO()
    fig.savefig(buf, format='png', dpi=160, bbox_inches="tight")
    buf.seek(0)
    part = MIMEImage(buf.read(), 'png')
    cid = f"{cid_hint}-{uuid.uuid4().hex}@carry"
    part.add_header('Content-ID', f"<{cid}>")
    part.add_header('Content-Disposition', 'inline', filename=f"{cid_hint}.png")
    msg.attach(part)
    return cid

def _df_to_html_table(df: pd.DataFrame, caption=None, max_rows=40, max_cols=20):
    """
    Rend le DataFrame en HTML (compact, police petite). 
    (Plus robuste qu'une capture image, et ça rend bien dans Outlook.)
    """
    if df is None or len(df) == 0:
        return "<div style='font-style:italic;color:#666'>No data</div>"
    df2 = df.copy()
    if df2.shape[0] > max_rows:
        df2 = df2.head(max_rows).append(pd.DataFrame([["..."]*df2.shape[1]], columns=df2.columns))
    if df2.shape[1] > max_cols:
        keep = list(df2.columns[:max_cols])
        df2 = df2[keep]
    html = df2.to_html(border=1, index=True, justify='center')
    if caption:
        html = f"<div style='font:600 12px Arial;margin:4px 0 2px 0'>{caption}</div>{html}"
    # styling léger
    html = html.replace("<table", "<table style='border-collapse:collapse;font:11px Arial;width:100%'")
    html = html.replace("<th>", "<th style='padding:4px 6px;background:#f2f2f2;border:1px solid #ddd'>")
    html = html.replace("<td>", "<td style='padding:3px 6px;border:1px solid #eee'>")
    return html

def _section_html(title_left, table_left_html, scatter_left_cid, cand_left_cids,
                  title_right, table_right_html, scatter_right_cid, cand_right_cids):
    """
    Construit une ligne (deux colonnes) pour Maturity / Box / Fly.
    Dans chaque colonne : titre, table, scatter, puis candlesticks empilés.
    """
    def col_block(title, table_html, scatter_cid, cand_cids):
        imgs = []
        if scatter_cid:
            imgs.append(f"<img src='cid:{scatter_cid}' style='width:100%;max-width:700px;display:block;margin:4px 0'>")
        for cid in cand_cids or []:
            if cid:
                imgs.append(f"<img src='cid:{cid}' style='width:100%;max-width:700px;display:block;margin:4px 0'>")
        return f"""
        <div style="padding:10px">
          <div style="font:700 14px Arial;margin:0 0 6px 0">{title}</div>
          {table_html}
          {''.join(imgs)}
        </div>"""
    return f"""
    <tr>
      <td valign="top" style="width:50%;border-right:1px solid #e6e6e6">
        {col_block(title_left,  table_left_html,  scatter_left_cid,  cand_left_cids)}
      </td>
      <td valign="top" style="width:50%">
        {col_block(title_right, table_right_html, scatter_right_cid, cand_right_cids)}
      </td>
    </tr>
    """

# -------- fonction principale --------
def send_carry_email(
    to_list,
    # Maturity (outright vs spread)
    pivot_outright: pd.DataFrame, fig_scatter_outright, cand_outright_figs,   # [FR, IT, ES] (ou ce que tu as)
    pivot_spread: pd.DataFrame,   fig_scatter_spread,   cand_spread_figs,
    # Box
    pivot_box_out: pd.DataFrame,  fig_scatter_box_out,  cand_box_out_figs,
    pivot_box_vs: pd.DataFrame,   fig_scatter_box_vs,   cand_box_vs_figs,
    # Fly
    pivot_fly_out: pd.DataFrame,  fig_scatter_fly_out,  cand_fly_out_figs,
    pivot_fly_vs: pd.DataFrame,   fig_scatter_fly_vs,   cand_fly_vs_figs,
    subject="Carry Summaries",
    sender="red.elfasssi@jpmorgan.com"  # adapte si besoin
):
    """
    Compose et envoie l'email avec :
      - 2 colonnes (gauche Outright, droite vs Germany)
      - 3 lignes : Maturity / Box / Fly
      - par bloc : pivot -> scatter -> 3 candlesticks
    """
    msg = MIMEMultipart('related')
    msg['Subject'] = subject
    msg['From']    = sender
    msg['To']      = ", ".join(to_list)

    # intro (en HTML)
    intro = """
    <div style="font:13px Arial">
      Hello Team,<br><br>
      Please find below the Carry Analysis.<br><br>
    </div>
    """

    # --- attacher images & récupérer CIDs ---
    # Maturity
    cid_sc_outright = _fig_to_cid(msg, fig_scatter_outright, "sc_outright")
    cids_cand_out   = [ _fig_to_cid(msg, f, f"cand_out_{i+1}") for i, f in enumerate(cand_outright_figs or []) ]
    cid_sc_spread   = _fig_to_cid(msg, fig_scatter_spread, "sc_spread")
    cids_cand_sp    = [ _fig_to_cid(msg, f, f"cand_sp_{i+1}")  for i, f in enumerate(cand_spread_figs or []) ]

    # Box
    cid_sc_box_out  = _fig_to_cid(msg, fig_scatter_box_out, "sc_box_out")
    cids_cand_box_o = [ _fig_to_cid(msg, f, f"cand_box_o_{i+1}") for i, f in enumerate(cand_box_out_figs or []) ]
    cid_sc_box_vs   = _fig_to_cid(msg, fig_scatter_box_vs, "sc_box_vs")
    cids_cand_box_v = [ _fig_to_cid(msg, f, f"cand_box_v_{i+1}") for i, f in enumerate(cand_box_vs_figs or []) ]

    # Fly
    cid_sc_fly_out  = _fig_to_cid(msg, fig_scatter_fly_out, "sc_fly_out")
    cids_cand_fly_o = [ _fig_to_cid(msg, f, f"cand_fly_o_{i+1}") for i, f in enumerate(cand_fly_out_figs or []) ]
    cid_sc_fly_vs   = _fig_to_cid(msg, fig_scatter_fly_vs, "sc_fly_vs")
    cids_cand_fly_v = [ _fig_to_cid(msg, f, f"cand_fly_v_{i+1}") for i, f in enumerate(cand_fly_vs_figs or []) ]

    # --- tables HTML (pivot) ---
    t_outright = _df_to_html_table(pivot_outright, caption="Pivot — Outright")
    t_spread   = _df_to_html_table(pivot_spread,   caption="Pivot — Spread vs Germany")
    t_box_out  = _df_to_html_table(pivot_box_out,  caption="Pivot — Curve Outright (Box)")
    t_box_vs   = _df_to_html_table(pivot_box_vs,   caption="Pivot — Box vs Germany")
    t_fly_out  = _df_to_html_table(pivot_fly_out,  caption="Pivot — Fly Outright")
    t_fly_vs   = _df_to_html_table(pivot_fly_vs,   caption="Pivot — Fly vs Germany")

    # --- grille 2 colonnes × 3 lignes ---
    body = f"""
    <html>
    <body style="margin:0;padding:0;background:#fff">
      {intro}
      <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%"
             style="border-collapse:collapse;font:13px Arial">
        <tr>
          <td colspan="2" style="font:700 16px Arial;padding:6px 10px;background:#f7f7f7;border-bottom:1px solid #e6e6e6">
             Outright (left)  —  vs Germany (right)
          </td>
        </tr>

        { _section_html(
            "Outright", t_outright, cid_sc_outright, cids_cand_out,
            "Spread vs Germany", t_spread, cid_sc_spread, cids_cand_sp
          ) }

        { _section_html(
            "Curve Outright (Box)", t_box_out, cid_sc_box_out, cids_cand_box_o,
            "Box vs Germany",       t_box_vs,  cid_sc_box_vs,  cids_cand_box_v
          ) }

        { _section_html(
            "Fly Outright", t_fly_out, cid_sc_fly_out, cids_cand_fly_o,
            "Fly vs Germany", t_fly_vs, cid_sc_fly_vs, cids_cand_fly_v
          ) }
      </table>
      <div style="height:12px"></div>
      <div style="font:11px Arial;color:#666;padding:0 10px">Generated automatically.</div>
    </body>
    </html>
    """

    msg.attach(MIMEText(body, 'html'))

    # --- envoi ---
    smtp = smtplib.SMTP('mailhost.jpmchase.net')
    smtp.starttls()
    smtp.sendmail(sender, to_list, msg.as_string())
    smtp.quit()


# =============================
# EXEMPLE D’APPEL (adapter tes objets)
# =============================
# send_carry_email(
#     to_list=["team@jpmorgan.com"],
#     # Maturity (outright vs spread)
#     pivot_outright=pivot_df_outright,  fig_scatter_outright=fig_scatter_out,  cand_outright_figs=[fig_fr_out, fig_it_out, fig_es_out],
#     pivot_spread=pivot_df_spread,      fig_scatter_spread=fig_scatter_sp,     cand_spread_figs=[fig_fr_sp, fig_it_sp, fig_es_sp],
#     # Box
#     pivot_box_out=pivot_df_box_out,    fig_scatter_box_out=fig_scatter_box_o, cand_box_out_figs=[fig_fr_box_o, fig_it_box_o, fig_es_box_o],
#     pivot_box_vs=pivot_df_box_vs,      fig_scatter_box_vs=fig_scatter_box_v,  cand_box_vs_figs=[fig_fr_box_v, fig_it_box_v, fig_es_box_v],
#     # Fly
#     pivot_fly_out=pivot_df_fly_out,    fig_scatter_fly_out=fig_scatter_fly_o, cand_fly_out_figs=[fig_fr_fly_o, fig_it_fly_o, fig_es_fly_o],
#     pivot_fly_vs=pivot_df_fly_vs,      fig_scatter_fly_vs=fig_scatter_fly_v,  cand_fly_vs_figs=[fig_fr_fly_v, fig_it_fly_v, fig_es_fly_v],
#     subject="Carry Summaries",
#     sender="ton.email@jpmorgan.com"
# )
