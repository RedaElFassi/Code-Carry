# =========================
# Candlestick-like charts (un fig par pays)
# =========================
import matplotlib.pyplot as plt
import pandas as pd

# Ordres d’affichage par axe X (si utiles chez toi)
maturity_order = [1,2,3,4,5,7,10,15,20,25,30]
box_order      = ['2s10s','5s10s','2s30s','5s30s','10s30s','10s15s']
fly_order      = ['2s5s10s','5s7s10s','10s15s30s','5s10s30s']

# ---------- util ----------
def _ensure_country_col(df: pd.DataFrame) -> pd.DataFrame:
    if 'Country' not in df.columns:
        if 'CountryPair' in df.columns:
            df = df.copy()
            df['Country'] = df['CountryPair'].str.split('-').str[0]
    return df

def _plot_one_country(ax, rows: pd.DataFrame, x_col: str, title_country: str):
    """
    rows: lignes d'un seul pays (colonnes: Min,Q25,Q50,Q75,Max,Vol,CarryOverVol,CarryOneWeekAgo).
    x_col: 'Maturity' | 'Box' | 'Fly'
    """
    # petit tri pour un X propre
    if x_col == 'Maturity':
        rows = rows.copy()
        rows = rows[rows['Maturity'].isin(maturity_order)]
        rows['__order'] = rows['Maturity'].apply(lambda x: maturity_order.index(x))
        rows = rows.sort_values('__order')
        xs = rows['Maturity'].tolist()
    elif x_col == 'Box':
        rows = rows.copy()
        rows = rows[rows['Box'].isin(box_order)]
        rows['__order'] = rows['Box'].apply(lambda x: box_order.index(x))
        rows = rows.sort_values('__order')
        xs = rows['Box'].tolist()
    else:  # Fly
        rows = rows.copy()
        rows = rows[rows['Fly'].isin(fly_order)]
        rows['__order'] = rows['Fly'].apply(lambda x: fly_order.index(x))
        rows = rows.sort_values('__order')
        xs = rows['Fly'].tolist()

    label_added = False
    for _, row in rows.iterrows():
        x = row[x_col]
        # ratios
        min_val    = row['Min']  / row['Vol']
        max_val    = row['Max']  / row['Vol']
        q1_val     = row['Q25']  / row['Vol']
        q3_val     = row['Q75']  / row['Vol']
        median_val = row['Q50']  / row['Vol']
        current    = row['CarryOverVol']                 # déjà / Vol côté data
        wk_ago     = row['CarryOneWeekAgo'] / row['Vol'] # ratio

        # --- barres type “candlestick” (comme ton code) ---
        ax.plot([x, x], [min_val, max_val], color='black', marker='_', linewidth=2)
        ax.plot([x, x], [q1_val,  q3_val ], color='black', linewidth=8, alpha=0.5)
        ax.plot([x, x], [q1_val,  q3_val ], color='white', linewidth=6, alpha=1.0)
        ax.plot([x, x], [median_val, median_val], color='black', marker='_', markersize=6, linestyle='None')

        # --- current value = trait rouge fin (PAS de rond) ---
        ax.plot([x-0.25, x+0.25], [current, current],
                color='red', linewidth=1.6, label='Current Value' if not label_added else "")

        # --- 1 week ago = trait bleu + petit point au centre ---
        ax.plot([x-0.25, x+0.25], [wk_ago, wk_ago],
                color='steelblue', linewidth=1.2, label='1 Week ago' if not label_added else "")
        ax.plot([x], [wk_ago], marker='o', markersize=3, color='steelblue')

        label_added = True

    ax.set_title(f'Candlestick-like Chart for {title_country}')
    ax.set_ylabel('CarryOverVol')
    ax.set_xlabel(x_col if x_col != 'Maturity' else 'Maturity Buckets')
    ax.grid(True, alpha=0.3)
    # légende en HAUT DROITE
    ax.legend(loc='upper right', fontsize=9)
    # ticks lisibles
    if x_col == 'Maturity':
        ax.set_xticks(xs)
    else:
        ax.set_xticklabels(xs, rotation=0)


# ---------- 1) OUTRIGHT ----------
def plot_candlestick_outright(df_outright: pd.DataFrame, countries=('France','Italy','Spain'), ignore_1y_2y=True):
    """
    df_outright colonnes attendues:
      Country, Maturity, Min,Q25,Q50,Q75,Max,Vol,CarryOverVol,CarryOneWeekAgo
    """
    df = _ensure_country_col(df_outright)
    for c in countries:
        rows = df[df['Country']==c].copy()
        if ignore_1y_2y:
            rows = rows[rows['Maturity'] > 2]
        fig, ax = plt.subplots(figsize=(12,6))
        _plot_one_country(ax, rows, x_col='Maturity', title_country=c)
        plt.show()

# ---------- 2) SPREADS vs Germany ----------
def plot_candlestick_spreads(df_spread: pd.DataFrame, countries=('France','Italy','Spain'), ignore_1y_2y=True):
    """
    df_spread colonnes attendues (depuis compute_spreads_from_synth):
      Country, Maturity, Min,Q25,Q50,Q75,Max,Vol,CarryOverVol,CarryOneWeekAgo
    Si Country absent -> déduit de CountryPair.
    """
    df = _ensure_country_col(df_spread)
    for c in countries:
        rows = df[df['Country']==c].copy()
        if rows.empty:
            continue
        if ignore_1y_2y:
            rows = rows[rows['Maturity'] > 2]
        fig, ax = plt.subplots(figsize=(12,6))
        _plot_one_country(ax, rows, x_col='Maturity', title_country=c)
        plt.show()

# ---------- 3) CURVE OUTRIGHT ----------
def plot_candlestick_curve(df_curve_out: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_curve_out colonnes: Country, Box, Min,Q25,Q50,Q75,Max,Vol,CarryOverVol,CarryOneWeekAgo
    """
    df = _ensure_country_col(df_curve_out)
    for c in countries:
        rows = df[df['Country']==c].copy()
        fig, ax = plt.subplots(figsize=(12,6))
        _plot_one_country(ax, rows, x_col='Box', title_country=c)
        plt.show()

# ---------- 4) BOX SPREADS vs Germany ----------
def plot_candlestick_box_spreads(df_box: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_box colonnes: Country, Box, Min,Q25,Q50,Q75,Max,Vol,CarryOverVol,CarryOneWeekAgo
    """
    df = _ensure_country_col(df_box)
    for c in countries:
        rows = df[df['Country']==c].copy()
        fig, ax = plt.subplots(figsize=(12,6))
        _plot_one_country(ax, rows, x_col='Box', title_country=c)
        plt.show()

# ---------- 5) FLY OUTRIGHT ----------
def plot_candlestick_fly_out(df_fly_out: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_fly_out colonnes: Country, Fly, Min,Q25,Q50,Q75,Max,Vol,CarryOverVol,CarryOneWeekAgo
    """
    df = _ensure_country_col(df_fly_out)
    for c in countries:
        rows = df[df['Country']==c].copy()
        fig, ax = plt.subplots(figsize=(12,6))
        _plot_one_country(ax, rows, x_col='Fly', title_country=c)
        plt.show()

# ---------- 6) FLY BOX SPREADS vs Germany ----------
def plot_candlestick_fly_box(df_fly_box: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_fly_box colonnes: Country, Fly, Min,Q25,Q50,Q75,Max,Vol,CarryOverVol,CarryOneWeekAgo
    """
    df = _ensure_country_col(df_fly_box)
    for c in countries:
        rows = df[df['Country']==c].copy()
        fig, ax = plt.subplots(figsize=(12,6))
        _plot_one_country(ax, rows, x_col='Fly', title_country=c)
        plt.show()

countries_to_plot = ('France','Italy','Spain')

# Outright
plot_candlestick_outright(df_outright, countries=countries_to_plot)

# Spreads vs Germany  (corrigé même si Country n'est pas dans le DF)
plot_candlestick_spreads(df_spread, countries=countries_to_plot)

# Curve outright
plot_candlestick_curve(df_curve_outright, countries=countries_to_plot)

# Box vs Germany
plot_candlestick_box_spreads(df_box, countries=countries_to_plot)

# Fly outright
plot_candlestick_fly_out(df_fly_outright, countries=countries_to_plot)

# Fly box vs Germany
plot_candlestick_fly_box(df_fly_box, countries=countries_to_plot)



