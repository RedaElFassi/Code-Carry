# =========================
# PLOTTING — Candlestick EXACT style (1 figure par pays, empilées)
# =========================
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# --- palettes & abbr (si tu en as déjà ailleurs, tu peux supprimer celui-ci)
country_shortcuts = {
    "France":"FR","Italy":"IT","Spain":"ES","Portugal":"PT","Belgium":"BE",
    "Austria":"AT","Finland":"FI","Greece":"GR","Germany":"DE","Netherlands":"NL"
}

# -------- Helpers communs --------
def _dedup_for_plot(df: pd.DataFrame, keys, value_cols):
    """
    Evite 'cannot reindex from a duplicate axis' :
    - groupby(keys) et on prend la moyenne des colonnes utiles.
    - puis on reconstruit 'CarryOverVol' si nécessaire.
    """
    # garde uniquement les colonnes dont on a besoin
    keep = list(set(keys) | set(value_cols))
    dd = df[keep].copy()

    # moyenne par (keys) si doublons
    agg = {c: 'mean' for c in value_cols}
    dd = dd.groupby(keys, as_index=False).agg(agg)

    # normalisation 1w : certaines DF stockent CarryOneWeekAgo (carry) -> on veut le ratio
    if 'CarryOneWeekAgo' in dd.columns and 'Vol' in dd.columns and 'CarryOverVol' not in dd.columns:
        # on ne touche pas aux DF où CarryOverVol est déjà fourni
        pass

    return dd

def _candlestick_one_country(ax, rows, x_key, y_ratio_key, cols_map):
    """
    Trace le 'candlestick-like' pour un pays.
    rows : DataFrame filtrée pays + (x_key unique par ligne)
    x_key: 'Bucket' (int) ou 'Box'/'Fly' (str)
    y_ratio_key: 'CarryOverVol' (si présent) sinon calculé en amont dans wrapper
    cols_map: dict avec noms de colonnes: 'Min','Q25','Q50','Q75','Max','Vol','CarryOneWeekAgo'
    """
    # On force l’ordre visuel des abscisses
    if x_key == 'Bucket':
        order = [1,2,3,4,5,7,10,15,20,25,30]
        rows = rows[rows[x_key].isin(order)].copy()
        rows[x_key] = pd.Categorical(rows[x_key], order, ordered=True)
        rows = rows.sort_values(x_key)
    else:
        # Box/Fly => garder l'ordre d'apparition
        rows = rows.copy()

    # Plot
    label_added = False
    for _, r in rows.iterrows():
        x    = r[x_key]
        vmin = r[cols_map['Min']] / r['Vol']
        q1   = r[cols_map['Q25']] / r['Vol']
        med  = r[cols_map['Q50']] / r['Vol']
        q3   = r[cols_map['Q75']] / r['Vol']
        vmax = r[cols_map['Max']] / r['Vol']
        curr = r[y_ratio_key]     # déjà un ratio
        prev = r[cols_map['CarryOneWeekAgo']] / r['Vol']

        # whiskers (min-max) noirs + petits “caps”
        ax.plot([x, x], [vmin, vmax], color='black', linewidth=2)
        ax.hlines([vmin, vmax], xmin=x, xmax=x, colors='black', linewidth=2)

        # “corps” Q1–Q3 : barre noire épaisse + liséré blanc au-dessus
        ax.plot([x, x], [q1, q3], color='black', linewidth=8, alpha=0.55)
        ax.plot([x, x], [q1, q3], color='white', linewidth=6)

        # médiane = petit trait noir
        ax.hlines(med, xmin=x, xmax=x, colors='black', linewidth=2)

        # CURRENT = trait rouge (pas de rond)
        ax.hlines(curr, xmin=x-0.20, xmax=x+0.20, colors='red', linewidth=2,
                  label='Current Value' if not label_added else None)

        # ONE WEEK AGO = trait bleu fin + minuscule rond au centre
        ax.hlines(prev, xmin=x-0.15, xmax=x+0.15, colors='steelblue', linewidth=1.5,
                  label='1 Week ago' if not label_added else None)
        ax.plot([x], [prev], marker='o', markersize=3, color='steelblue')

        label_added = True

    ax.grid(True, alpha=0.25)
    ax.legend(loc='upper right', fontsize=9)
    ax.set_xlabel(x_key if x_key != 'Bucket' else 'Maturity Buckets')
    ax.set_ylabel('Carry/Vol')

# -------- Wrappers CANDLESTICK (un par dataframe) --------
# Chaque fonction prend la DF d’entrée (colonnes “logiques” de calcul que tu génères déjà)
# et une liste de pays à tracer (empilés verticalement).

def plot_candlestick_spreads(df_spread: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_spread colonnes attendues :
    Country, Maturity (int), Vol, CarrySpread, Min, Q25, Q50, Q75, Max, CarryOneWeekAgo
    """
    # Harmonise noms -> Bucket & CarryOverVol (ratio)
    df = df_spread.rename(columns={'Maturity':'Bucket'}).copy()
    df['CarryOverVol'] = df['CarrySpread'] / df['Vol']
    cols_map = {'Min':'Min','Q25':'Q25','Q50':'Q50','Q75':'Q75','Max':'Max','CarryOneWeekAgo':'CarryOneWeekAgo'}

    # Dé-duplique : (Country, Bucket)
    df = _dedup_for_plot(df, keys=['Country','Bucket'], value_cols=list(cols_map.values())+['Vol','CarryOverVol'])

    for c in countries:
        sub = df[df['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 4.5))
        _candlestick_one_country(ax, sub, x_key='Bucket', y_ratio_key='CarryOverVol', cols_map=cols_map)
        ax.set_title(f"Candlestick-like Chart for {c}")
        plt.show()

def plot_candlestick_boxes(df_box: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_box colonnes : Country, Box(str), Vol, Carry, Min, Q25, Q50, Q75, Max, CarryOneWeekAgo
    """
    df = df_box.copy()
    df['CarryOverVol'] = df['Carry'] / df['Vol']
    cols_map = {'Min':'Min','Q25':'Q25','Q50':'Q50','Q75':'Q75','Max':'Max','CarryOneWeekAgo':'CarryOneWeekAgo'}
    df = _dedup_for_plot(df, keys=['Country','Box'], value_cols=list(cols_map.values())+['Vol','CarryOverVol'])

    for c in countries:
        sub = df[df['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 4.5))
        _candlestick_one_country(ax, sub, x_key='Box', y_ratio_key='CarryOverVol', cols_map=cols_map)
        ax.set_title(f"Candlestick-like Chart for {c}")
        plt.show()

def plot_candlestick_outright(df_out: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_out colonnes : Country, Maturity(int), Vol, Carry, Min, Q25, Q50, Q75, Max, CarryOneWeekAgo
    """
    df = df_out.rename(columns={'Maturity':'Bucket'}).copy()
    df['CarryOverVol'] = df['Carry'] / df['Vol']
    cols_map = {'Min':'Min','Q25':'Q25','Q50':'Q50','Q75':'Q75','Max':'Max','CarryOneWeekAgo':'CarryOneWeekAgo'}
    df = _dedup_for_plot(df, keys=['Country','Bucket'], value_cols=list(cols_map.values())+['Vol','CarryOverVol'])

    for c in countries:
        sub = df[df['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 4.5))
        _candlestick_one_country(ax, sub, x_key='Bucket', y_ratio_key='CarryOverVol', cols_map=cols_map)
        ax.set_title(f"Candlestick-like Chart for {c}")
        plt.show()

def plot_candlestick_curve_outright(df_curve: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_curve colonnes : Country, Box(str), Vol, Carry, Min, Q25, Q50, Q75, Max, CarryOneWeekAgo
    """
    df = df_curve.copy()
    df['CarryOverVol'] = df['Carry'] / df['Vol']
    cols_map = {'Min':'Min','Q25':'Q25','Q50':'Q50','Q75':'Q75','Max':'Max','CarryOneWeekAgo':'CarryOneWeekAgo'}
    df = _dedup_for_plot(df, keys=['Country','Box'], value_cols=list(cols_map.values())+['Vol','CarryOverVol'])

    for c in countries:
        sub = df[df['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 4.5))
        _candlestick_one_country(ax, sub, x_key='Box', y_ratio_key='CarryOverVol', cols_map=cols_map)
        ax.set_title(f"Candlestick-like Chart for {c}")
        plt.show()

def plot_candlestick_fly_outright(df_fly_out: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_fly_out colonnes : Country, Fly(str), Vol, Carry, Min, Q25, Q50, Q75, Max, CarryOneWeekAgo
    """
    df = df_fly_out.copy()
    df['CarryOverVol'] = df['Carry'] / df['Vol']
    cols_map = {'Min':'Min','Q25':'Q25','Q50':'Q50','Q75':'Q75','Max':'Max','CarryOneWeekAgo':'CarryOneWeekAgo'}
    df = _dedup_for_plot(df, keys=['Country','Fly'], value_cols=list(cols_map.values())+['Vol','CarryOverVol'])

    for c in countries:
        sub = df[df['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 4.5))
        _candlestick_one_country(ax, sub, x_key='Fly', y_ratio_key='CarryOverVol', cols_map=cols_map)
        ax.set_title(f"Candlestick-like Chart for {c}")
        plt.show()

def plot_candlestick_fly_box(df_fly_box: pd.DataFrame, countries=('France','Italy','Spain')):
    """
    df_fly_box colonnes : Country, Fly(str), Vol, Carry, Min, Q25, Q50, Q75, Max, CarryOneWeekAgo
    """
    df = df_fly_box.copy()
    df['CarryOverVol'] = df['Carry'] / df['Vol']
    cols_map = {'Min':'Min','Q25':'Q25','Q50':'Q50','Q75':'Q75','Max':'Max','CarryOneWeekAgo':'CarryOneWeekAgo'}
    df = _dedup_for_plot(df, keys=['Country','Fly'], value_cols=list(cols_map.values())+['Vol','CarryOverVol'])

    for c in countries:
        sub = df[df['Country']==c].copy()
        if sub.empty: 
            continue
        fig, ax = plt.subplots(figsize=(12, 4.5))
        _candlestick_one_country(ax, sub, x_key='Fly', y_ratio_key='CarryOverVol', cols_map=cols_map)
        ax.set_title(f"Candlestick-like Chart for {c}")
        plt.show()

# =========================
# EXEMPLES D’APPEL — tu lances seulement ce dont tu as besoin
# =========================
# countries_to_plot = ("France","Italy","Spain")

# plot_candlestick_spreads(df_spread, countries_to_plot)
# plot_candlestick_boxes(df_box, countries_to_plot)
# plot_candlestick_outright(df_outright, countries_to_plot)
# plot_candlestick_curve_outright(df_curve_outright, countries_to_plot)
# plot_candlestick_fly_outright(df_fly_outright, countries_to_plot)
# plot_candlestick_fly_box(df_fly_box, countries_to_plot)




