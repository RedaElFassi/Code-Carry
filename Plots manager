# =============================
# Candlestick-like plots (1 fig par pays, empilés) — 6 familles
# =============================
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Ordres d’affichage pour les x catégoriels (boxes / flies)
BOX_ORDER = ['2s10s','5s10s','2s30s','5s30s','10s30s','10s15s']
FLY_ORDER = ['2s5s10s','5s7s10s','10s15s30s','5s10s30s']

# ---------- Helpers communs ----------

def _draw_one_candlestick(ax, x, row, vol_col='Vol',
                          min_col='Min', q25_col='Q25', q50_col='Q50',
                          q75_col='Q75', max_col='Max',
                          cov_col='CarryOverVol', weekago_col='CarryOneWeekAgo'):
    """Dessine un ‘chandelier’ carry/vol pour une ligne."""
    vol = row[vol_col]
    if pd.isna(vol) or vol == 0:
        return

    # Tout en ratio carry/vol (comme dans ton code)
    y_min   = row[min_col]  / vol
    y_q25   = row[q25_col]  / vol
    y_med   = row[q50_col]  / vol
    y_q75   = row[q75_col]  / vol
    y_max   = row[max_col]  / vol
    y_curr  = row.get(cov_col, np.nan)
    y_wkago = (row.get(weekago_col, np.nan) / vol) if pd.notna(row.get(weekago_col, np.nan)) else np.nan

    # Whisker min–max (noir fin)
    ax.plot([x, x], [y_min, y_max], color='black', linewidth=2, marker='_')

    # Barre Q25–Q75 (noir épais et fond blanc comme ton rendu)
    ax.plot([x, x], [y_q25, y_q75], color='black', linewidth=8, alpha=0.5)
    ax.plot([x, x], [y_q25, y_q75], color='white', linewidth=6)

    # Médiane (trait noir)
    ax.plot([x, x], [y_med, y_med], color='black', marker='_', markersize=6)

    # Current (point rouge) & 1w ago (point bleu)
    if pd.notna(y_curr):
        ax.plot(x, y_curr, color='red', marker='o', markersize=10, label='Current Value')
    if pd.notna(y_wkago):
        ax.plot(x, y_wkago, color='steelblue', marker='o', markersize=8, label='1 Week ago')


def _country_stack(fig_title_prefix, df, countries=('France','Italy','Spain'),
                   x_col='Maturity',  # 'Maturity' (num), 'Box' (cat), 'Fly' (cat)
                   carry_kind_label='CarryOverVol',
                   min_bucket=3,      # pour Maturity: on masque 1y & 2y par défaut
                   x_order=None       # pour cat : ordre imposé
                   ):
    """
    Crée 1 figure par pays (donc les figures s'empilent verticalement dans le notebook).
    Chaque figure contient TOUTES les maturités/boxes/flies du pays.
    """
    # Gestion des X (numérique vs catégoriel)
    is_categorical = x_col in ('Box', 'Fly')
    if is_categorical:
        if x_order is None:
            # ordre alpha si non fourni
            cats = sorted(df[x_col].dropna().unique().tolist())
            x_order = cats
        x_to_pos = {name: i+1 for i, name in enumerate(x_order)}  # positions 1..N

    for country in countries:
        sub = df[df['Country'] == country].copy()
        if sub.empty:
            continue

        # Filtre 1y/2y si on est sur des maturités numériques
        if not is_categorical and min_bucket is not None:
            sub = sub[sub[x_col] >= min_bucket]

        if sub.empty:
            continue

        fig, ax = plt.subplots(figsize=(12, 6))

        # Tri sur l’axe X
        if is_categorical:
            sub['_xpos_'] = sub[x_col].map(x_to_pos)
            sub = sub.sort_values('_xpos_')
            xs = sub['_xpos_'].tolist()
            xtick_labels = sub[x_col].tolist()
        else:
            sub = sub.sort_values(x_col)
            xs = sub[x_col].tolist()
            xtick_labels = sub[x_col].tolist()

        # Dessin
        first_legend_done = False
        for x, (_, row) in zip(xs, sub.iterrows()):
            _draw_one_candlestick(ax, x, row)
            # On ne garde la légende qu’une fois
            if not first_legend_done:
                first_legend_done = True

        # Axes, ticks, titre
        if is_categorical:
            ax.set_xticks(xs)
            ax.set_xticklabels(xtick_labels, rotation=0)
            ax.set_xlabel(x_col)
        else:
            ax.set_xlabel('Maturity Buckets')

        ax.set_ylabel('CarryOverVol')
        ax.set_title(f"{fig_title_prefix} for {country}")
        ax.grid(True)

        # Légende : ‘Current Value’ & ‘1 Week ago’
        handles, labels = ax.get_legend_handles_labels()
        if handles:
            # supprimer doublons
            uniq = dict(zip(labels, handles))
            ax.legend(uniq.values(), uniq.keys(), loc='upper left')

        plt.show()


# ---------- 1) Spreads vs Germany ----------
def plot_candlestick_spreads(df_spread, countries=('France','Italy','Spain')):
    """
    df_spread: colonnes attendues
      ['Country','Maturity','Vol','Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']
    """
    _country_stack("Candlestick-like Chart (Spreads vs Germany)",
                   df_spread, countries=countries,
                   x_col='Maturity', carry_kind_label='CarryOverVol',
                   min_bucket=3, x_order=None)

# ---------- 2) Boxes vs Germany ----------
def plot_candlestick_boxes(df_box, countries=('France','Italy','Spain')):
    """
    df_box: colonnes attendues
      ['Country','Box','Vol','Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']
    """
    _country_stack("Candlestick-like Chart (Box Spreads vs Germany)",
                   df_box, countries=countries,
                   x_col='Box', carry_kind_label='CarryOverVol',
                   min_bucket=None, x_order=BOX_ORDER)

# ---------- 3) Outright ----------
def plot_candlestick_outright(df_outright, countries=('France','Italy','Spain')):
    """
    df_outright: colonnes attendues
      ['Country','Maturity','Vol','Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']
    """
    # On ne trace jamais Germany ici (tu l’as précisé pour l’outright)
    df = df_outright[df_outright['Country'] != 'Germany'].copy()
    _country_stack("Candlestick-like Chart (Outright)",
                   df, countries=countries,
                   x_col='Maturity', carry_kind_label='CarryOverVol',
                   min_bucket=3, x_order=None)

# ---------- 4) Curve Outright ----------
def plot_candlestick_curve_outright(df_curve, countries=('France','Italy','Spain')):
    """
    df_curve: colonnes attendues
      ['Country','Box','Vol','Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']
    """
    _country_stack("Candlestick-like Chart (Curve Outright)",
                   df_curve, countries=countries,
                   x_col='Box', carry_kind_label='CarryOverVol',
                   min_bucket=None, x_order=BOX_ORDER)

# ---------- 5) Fly Outright ----------
def plot_candlestick_fly_outright(df_fly_out, countries=('France','Italy','Spain')):
    """
    df_fly_out: colonnes attendues
      ['Country','Fly','Vol','Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']
    """
    _country_stack("Candlestick-like Chart (Fly Outright)",
                   df_fly_out, countries=countries,
                   x_col='Fly', carry_kind_label='CarryOverVol',
                   min_bucket=None, x_order=FLY_ORDER)

# ---------- 6) Fly Boxes vs Germany ----------
def plot_candlestick_fly_box(df_fly_box, countries=('France','Italy','Spain')):
    """
    df_fly_box: colonnes attendues
      ['Country','Fly','Vol','Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']
    """
    _country_stack("Candlestick-like Chart (Fly Box vs Germany)",
                   df_fly_box, countries=countries,
                   x_col='Fly', carry_kind_label='CarryOverVol',
                   min_bucket=None, x_order=FLY_ORDER)


# =============================
# EXEMPLES D’APPELS (décommente ceux que tu veux)
# =============================

# countries_to_plot = ("France","Italy","Spain")

# plot_candlestick_spreads(df_spread, countries_to_plot)
# plot_candlestick_boxes(df_box, countries_to_plot)
# plot_candlestick_outright(df_outright, countries_to_plot)
# plot_candlestick_curve_outright(df_curve_outright, countries_to_plot)
# plot_candlestick_fly_outright(df_fly_outright, countries_to_plot)
# plot_candlestick_fly_box(df_fly_box, countries_to_plot)



