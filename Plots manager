import matplotlib.pyplot as plt
import pandas as pd

# -----------------------------
# Utilitaires communs
# -----------------------------
def _ensure_country_col(df: pd.DataFrame) -> pd.DataFrame:
    """S'il n'y a pas 'Country' mais 'CountryPair', crée 'Country' = avant le '-'.
    Ne modifie pas l'original."""
    if 'Country' in df.columns:
        return df.copy()
    if 'CountryPair' in df.columns:
        out = df.copy()
        out['Country'] = out['CountryPair'].astype(str).str.split('-').str[0]
        return out
    return df.copy()

def _prep_rows_from_df(df, country, x_col, carry_col, vol_col='Vol'):
    """
    Prépare les lignes à tracer pour un pays :
    - calcule tout en ratio / Vol: Min..Max, Q50, CarryOneWeekAgo, CarryOverVol
    - garde les colonnes: ['x','Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']
    """
    df = _ensure_country_col(df)
    sub = df[df['Country'] == country].copy()
    if sub.empty:
        return pd.DataFrame()

    must_cols = ['Min','Q25','Q50','Q75','Max', carry_col, vol_col]
    for col in must_cols:
        if col not in sub.columns:
            # si champs manquant => rien à tracer proprement
            return pd.DataFrame()

    # ratios
    for c in ['Min','Q25','Q50','Q75','Max','CarryOneWeekAgo']:
        if c in sub.columns:
            sub[c] = sub[c] / sub[vol_col]
    if 'CarryOverVol' not in sub.columns:
        sub['CarryOverVol'] = sub[carry_col] / sub[vol_col]

    # axe X
    sub = sub.rename(columns={x_col: 'x'}).dropna(subset=['x'])
    if x_col == 'Maturity':
        # comme sur ton screenshot: on enlève 1y/2y
        sub = sub[sub['x'] > 2]

    # tri
    sub = sub.sort_values('x')
    # arrondis légers pour éviter du bruit visuel
    for c in ['Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']:
        if c in sub.columns:
            sub[c] = sub[c].astype(float)
    return sub[['x','Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo']].copy()

def _plot_one_country_csticks(ax, rows, x_values, x_is_labels, title_country):
    """
    Dessin conforme aux specs:
    - whiskers min/max avec chapeaux
    - barre Q25-Q75 noire épaisse + ligne blanche
    - médiane Q50 en trait noir
    - current = trait rouge
    - week-ago = trait bleu + petit rond bleu
    """
    # Réindexe dans l’ordre voulu
    if x_is_labels:
        # rows.x = labels, on aligne sur x_values (labels)
        rows = rows.set_index('x').reindex(x_values).dropna(how='any')
        x_positions = list(range(len(rows)))
        xtick_labels = list(rows.index)
    else:
        # rows.x = numériques (maturities)
        rows = rows.set_index('x').reindex(x_values).dropna(how='any')
        x_positions = list(rows.index)           # positions = valeurs
        xtick_labels = list(rows.index)          # mêmes labels

    # largeur demi-cap
    cap = 0.22
    box_half = 0.0  # la "boîte" est rendue en vlines épaisses

    # Itération dans l’ordre
    for i, (x, r) in enumerate(rows.iterrows()):
        xpos = i if x_is_labels else x

        # 1) Whisker (Min-Max) + chapeaux
        ax.vlines(xpos, r['Min'], r['Max'], color='black', linewidth=1.5)
        ax.hlines(r['Min'], xpos-cap, xpos+cap, color='black', linewidth=1.5)
        ax.hlines(r['Max'], xpos-cap, xpos+cap, color='black', linewidth=1.5)

        # 2) Boîte Q25-Q75: barre noire épaisse + ligne blanche dessus
        ax.vlines(xpos, r['Q25'], r['Q75'], color='black', linewidth=8, alpha=0.6)
        ax.vlines(xpos, r['Q25'], r['Q75'], color='white', linewidth=5, alpha=1.0)

        # 3) Médiane Q50 (trait noir)
        ax.hlines(r['Q50'], xpos-0.30, xpos+0.30, color='black', linewidth=1.6)

        # 4) Current value: trait rouge UNIQUEMENT
        ax.hlines(r['CarryOverVol'], xpos-0.25, xpos+0.25, color='red', linewidth=1.8)

        # 5) One week ago: trait bleu + petit rond
        if pd.notna(r['CarryOneWeekAgo']):
            ax.hlines(r['CarryOneWeekAgo'], xpos-0.25, xpos+0.25, color='steelblue', linewidth=1.2)
            ax.plot(xpos, r['CarryOneWeekAgo'], marker='o', markersize=3, color='steelblue')

    # Mise en forme
    ax.set_title(f"Candlestick-like Chart for {title_country}")
    ax.set_ylabel("CarryOverVol")
    ax.grid(True, alpha=0.25)

    if x_is_labels:
        ax.set_xticks(range(len(xtick_labels)))
        ax.set_xticklabels(xtick_labels)
    else:
        ax.set_xticks(x_positions)
        ax.set_xticklabels(xtick_labels)

    # Légende en haut-droite
    # (éléments factices pour montrer les styles)
    ax.plot([], [], color='red', linewidth=1.8, label='Current value')
    ax.plot([], [], color='steelblue', linewidth=1.2, label='1 week ago')
    ax.plot([], [], color='black', linewidth=1.6, label='Median (Q50)')
    ax.legend(loc='upper right', fontsize=9)


# -----------------------------
# 1) SPREADS vs Germany
#    df: compute_spreads_from_synth(...)
#    colonnes: Country or CountryPair, Maturity, CarrySpread, Vol, Min..Max, CarryOneWeekAgo
# -----------------------------
def plot_candlestick_spreads(df_spread, countries_to_plot):
    df_spread = _ensure_country_col(df_spread)
    maturity_order = [3,4,5,7,10,15,20,25,30]  # 1y/2y exclus
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_spread, ctry, 'Maturity', 'CarrySpread', 'Vol')
        if rows.empty:
            print(f"[spread] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, maturity_order, x_is_labels=False, title_country=ctry)
        ax.set_xlabel("Maturity buckets")
        plt.show()

# -----------------------------
# 2) OUTRIGHT
#    df: compute_outright(...)
# -----------------------------
def plot_candlestick_outright(df_outright, countries_to_plot):
    maturity_order = [3,4,5,7,10,15,20,25,30]
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_outright, ctry, 'Maturity', 'Carry', 'Vol')
        if rows.empty:
            print(f"[outright] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, maturity_order, x_is_labels=False, title_country=ctry)
        ax.set_xlabel("Maturity buckets")
        plt.show()

# -----------------------------
# 3) CURVE OUTRIGHT
#    df: compute_curve_outright_from_synth(...)
# -----------------------------
def plot_candlestick_curve(df_curve, countries_to_plot,
                           box_order=('2s10s','5s10s','2s30s','5s30s','10s30s','10s15s')):
    x_labels = list(box_order)
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_curve, ctry, 'Box', 'Carry', 'Vol')
        if rows.empty:
            print(f"[curve] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, x_labels, x_is_labels=True, title_country=ctry)
        ax.set_xlabel("Curve boxes")
        plt.show()

# -----------------------------
# 4) BOX SPREADS vs Germany
#    df: compute_box_spreads_from_synth(...)
# -----------------------------
def plot_candlestick_box(df_box, countries_to_plot,
                         box_order=('2s10s','5s10s','2s30s','5s30s','10s30s','10s15s')):
    x_labels = list(box_order)
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_box, ctry, 'Box', 'Carry', 'Vol')
        if rows.empty:
            print(f"[box spread] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, x_labels, x_is_labels=True, title_country=ctry)
        ax.set_xlabel("Box spreads vs Germany")
        plt.show()

# -----------------------------
# 5) FLY OUTRIGHT
#    df: compute_fly_outright_from_synth(...)
# -----------------------------
def plot_candlestick_fly_out(df_fly_out, countries_to_plot,
                             fly_order=('2s5s10s','5s7s10s','10s15s30s','5s10s30s')):
    x_labels = list(fly_order)
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_fly_out, ctry, 'Fly', 'Carry', 'Vol')
        if rows.empty:
            print(f"[fly outright] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, x_labels, x_is_labels=True, title_country=ctry)
        ax.set_xlabel("Fly outright")
        plt.show()

# -----------------------------
# 6) FLY BOX SPREADS vs Germany
#    df: compute_fly_box_spreads_from_synth(...)
# -----------------------------
def plot_candlestick_fly_box(df_fly_box, countries_to_plot,
                             fly_order=('2s5s10s','5s7s10s','10s15s30s','5s10s30s')):
    x_labels = list(fly_order)
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_fly_box, ctry, 'Fly', 'Carry', 'Vol')
        if rows.empty:
            print(f"[fly box] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, x_labels, x_is_labels=True, title_country=ctry)
        ax.set_xlabel("Fly box spreads vs Germany")
        plt.show()


countries = ["France","Italy","Spain"]

# Candlesticks (tu appelles seulement ce dont tu as besoin)
plot_candlestick_spreads(df_spread, countries)
plot_candlestick_outright(df_outright, countries)
plot_candlestick_curve(df_curve_outright, countries)
plot_candlestick_box(df_box, countries)
plot_candlestick_fly_out(df_fly_outright, countries)
plot_candlestick_fly_box(df_fly_box, countries)




