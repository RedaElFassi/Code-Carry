import matplotlib.pyplot as plt
import pandas as pd

# -----------------------------------------
# Helpers communs (dessin du "candlestick")
# -----------------------------------------
def _plot_one_country_csticks(ax, df_rows, x_values, x_is_labels=True, title_country=""):
    """
    df_rows: DataFrame déjà filtré à un pays, avec colonnes:
      'x', 'Min','Q25','Q50','Q75','Max','CarryOverVol','CarryOneWeekAgo','Vol'
    x_values: ordre sur l'axe X (liste d'ints ou de labels)
    """
    # on s’assure de dessiner dans l’ordre voulu
    df_rows = df_rows.set_index('x').reindex(x_values).dropna(subset=['Min','Q25','Q50','Q75','Max'])

    for i, (x, row) in enumerate(df_rows.iterrows()):
        # Convertit le label en position numérique si besoin
        xpos = i if x_is_labels else x

        # whisker min-max (trait noir fin)
        ax.vlines(xpos, row['Min'], row['Max'], color='black', linewidth=2)

        # "corps" (q1-q3) — barre noire épaisse avec ligne blanche par-dessus
        ax.vlines(xpos, row['Q25'], row['Q75'], color='black', linewidth=8, alpha=0.5)
        ax.vlines(xpos, row['Q25'], row['Q75'], color='white', linewidth=6, alpha=1.0)

        # repère "current value" = petit trait rouge uniquement
        half = 0.20  # demi-largeur du petit trait
        ax.hlines(row['CarryOverVol'], xpos-half, xpos+half, color='red', linewidth=1.8)

        # repère "1 week ago" = trait bleu + minuscule point bleu au centre
        ax.hlines(row['CarryOneWeekAgo'], xpos-half, xpos+half, color='steelblue', linewidth=1.2)
        ax.plot(xpos, row['CarryOneWeekAgo'], marker='o', markersize=3, color='steelblue')

    # mise en forme
    ax.set_title(f"Candlestick-like Chart for {title_country}")
    ax.set_ylabel("CarryOverVol")
    ax.grid(True, alpha=.25)

    # X ticks
    if x_is_labels:
        ax.set_xticks(range(len(x_values)))
        ax.set_xticklabels(x_values)
    else:
        ax.set_xticks(x_values)

    # légende (éléments factices pour libellés)
    ax.plot([], [], color='red', linewidth=1.8, label='Current value')
    ax.plot([], [], color='steelblue', linewidth=1.2, label='1 week ago')
    ax.legend(loc='upper right', fontsize=9)


def _prep_rows_from_df(df, country, x_col, carry_col, vol_col="Vol"):
    """
    Construit un dataframe prêt à tracer:
    colonnes: x, Min..Max, CarryOverVol, CarryOneWeekAgo, Vol
    et applique le ratio /Vol partout.
    """
    sub = df[df['Country'] == country].copy()
    if sub.empty:
        return pd.DataFrame()

    # on a Min, Q25, Q50, Q75, Max au niveau "carry" -> on divise par Vol
    for col in ['Min','Q25','Q50','Q75','Max','CarryOneWeekAgo']:
        if col in sub.columns:
            sub[col] = sub[col] / sub[vol_col]

    # CarryOverVol: si colonne déjà présente, on la garde, sinon on recalcule
    if 'CarryOverVol' not in sub.columns:
        sub['CarryOverVol'] = sub[carry_col] / sub[vol_col]

    # on renomme l’axe X en 'x'
    sub = sub.rename(columns={x_col: 'x'})

    # on enlève les maturités 1y/2y si tu ne veux pas les voir
    if x_col == 'Maturity':
        sub = sub[sub['x'] > 2]  # garde 3y+ (comme ton screenshot)

    # tri par x
    return sub.sort_values('x')


# -----------------------------------------
# 1) Candlestick — SPREADS vs Germany
#     df attendu: compute_spreads_from_synth(...)
#     colonnes clés: Country, Maturity, CarrySpread, Vol, Min..Max, CarryOneWeekAgo
# -----------------------------------------
def plot_candlestick_spreads(df_spread, countries_to_plot):
    maturity_order = [3,4,5,7,10,15,20,25,30]  # 1y/2y exclus comme sur ton graph
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_spread, ctry, 'Maturity', 'CarrySpread', 'Vol')
        if rows.empty:
            print(f"[spread] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, maturity_order, x_is_labels=False, title_country=ctry)
        ax.set_xlabel("Maturity buckets")
        plt.show()


# -----------------------------------------
# 2) Candlestick — OUTRIGHT
#     df attendu: compute_outright(...)
#     colonnes clés: Country, Maturity, Carry, Vol, Min..Max, CarryOneWeekAgo
# -----------------------------------------
def plot_candlestick_outright(df_outright, countries_to_plot):
    maturity_order = [3,4,5,7,10,15,20,25,30]
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_outright, ctry, 'Maturity', 'Carry', 'Vol')
        if rows.empty:
            print(f"[outright] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, maturity_order, x_is_labels=False, title_country=ctry)
        ax.set_xlabel("Maturity buckets")
        plt.show()


# -----------------------------------------
# 3) Candlestick — CURVE OUTRIGHT (long-short)
#     df attendu: compute_curve_outright_from_synth(...)
#     colonnes clés: Country, Box, Carry, Vol, Min..Max, CarryOneWeekAgo
# -----------------------------------------
def plot_candlestick_curve(df_curve, countries_to_plot, box_order=('2s10s','5s10s','2s30s','5s30s','10s30s','10s15s')):
    x_labels = list(box_order)
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_curve, ctry, 'Box', 'Carry', 'Vol')
        if rows.empty:
            print(f"[curve] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, x_labels, x_is_labels=True, title_country=ctry)
        ax.set_xlabel("Curve boxes")
        plt.show()


# -----------------------------------------
# 4) Candlestick — BOX SPREADS vs Germany
#     df attendu: compute_box_spreads_from_synth(...)
#     colonnes clés: Country, Box, Carry, Vol, Min..Max, CarryOneWeekAgo
# -----------------------------------------
def plot_candlestick_box(df_box, countries_to_plot, box_order=('2s10s','5s10s','2s30s','5s30s','10s30s','10s15s')):
    x_labels = list(box_order)
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_box, ctry, 'Box', 'Carry', 'Vol')
        if rows.empty:
            print(f"[box spread] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, x_labels, x_is_labels=True, title_country=ctry)
        ax.set_xlabel("Box spreads vs Germany")
        plt.show()


# -----------------------------------------
# 5) Candlestick — FLY OUTRIGHT (3 legs)
#     df attendu: compute_fly_outright_from_synth(...)
#     colonnes clés: Country, Fly, Carry, Vol, Min..Max, CarryOneWeekAgo
# -----------------------------------------
def plot_candlestick_fly_out(df_fly_out, countries_to_plot, fly_order=('2s5s10s','5s7s10s','10s15s30s','5s10s30s')):
    x_labels = list(fly_order)
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_fly_out, ctry, 'Fly', 'Carry', 'Vol')
        if rows.empty:
            print(f"[fly outright] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, x_labels, x_is_labels=True, title_country=ctry)
        ax.set_xlabel("Fly outright")
        plt.show()


# -----------------------------------------
# 6) Candlestick — FLY BOX SPREADS vs Germany
#     df attendu: compute_fly_box_spreads_from_synth(...)
#     colonnes clés: Country, Fly, Carry, Vol, Min..Max, CarryOneWeekAgo
# -----------------------------------------
def plot_candlestick_fly_box(df_fly_box, countries_to_plot, fly_order=('2s5s10s','5s7s10s','10s15s30s','5s10s30s')):
    x_labels = list(fly_order)
    for ctry in countries_to_plot:
        rows = _prep_rows_from_df(df_fly_box, ctry, 'Fly', 'Carry', 'Vol')
        if rows.empty:
            print(f"[fly box] rien à tracer pour {ctry}")
            continue
        fig, ax = plt.subplots(figsize=(12, 6))
        _plot_one_country_csticks(ax, rows, x_labels, x_is_labels=True, title_country=ctry)
        ax.set_xlabel("Fly box spreads vs Germany")
        plt.show()

countries = ["France","Italy","Spain"]

# Candlesticks (tu appelles seulement ce dont tu as besoin)
plot_candlestick_spreads(df_spread, countries)
plot_candlestick_outright(df_outright, countries)
plot_candlestick_curve(df_curve_outright, countries)
plot_candlestick_box(df_box, countries)
plot_candlestick_fly_out(df_fly_outright, countries)
plot_candlestick_fly_box(df_fly_box, countries)




